//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF_DF_Classic
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CF_BookStoreEntities : DbContext
    {
        public CF_BookStoreEntities()
            : base("name=CF_BookStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Author> Author { get; set; }
        public virtual DbSet<Book> Book { get; set; }
    
        public virtual int AddBook(string bookTitle, string bookDescription, string bookGenre, Nullable<int> bookStock, Nullable<System.DateTime> bookReleaseDate, Nullable<int> bookAuthorId)
        {
            var bookTitleParameter = bookTitle != null ?
                new ObjectParameter("BookTitle", bookTitle) :
                new ObjectParameter("BookTitle", typeof(string));
    
            var bookDescriptionParameter = bookDescription != null ?
                new ObjectParameter("BookDescription", bookDescription) :
                new ObjectParameter("BookDescription", typeof(string));
    
            var bookGenreParameter = bookGenre != null ?
                new ObjectParameter("BookGenre", bookGenre) :
                new ObjectParameter("BookGenre", typeof(string));
    
            var bookStockParameter = bookStock.HasValue ?
                new ObjectParameter("BookStock", bookStock) :
                new ObjectParameter("BookStock", typeof(int));
    
            var bookReleaseDateParameter = bookReleaseDate.HasValue ?
                new ObjectParameter("BookReleaseDate", bookReleaseDate) :
                new ObjectParameter("BookReleaseDate", typeof(System.DateTime));
    
            var bookAuthorIdParameter = bookAuthorId.HasValue ?
                new ObjectParameter("BookAuthorId", bookAuthorId) :
                new ObjectParameter("BookAuthorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBook", bookTitleParameter, bookDescriptionParameter, bookGenreParameter, bookStockParameter, bookReleaseDateParameter, bookAuthorIdParameter);
        }
    
        public virtual ObjectResult<AllBooks_Result> AllBooks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllBooks_Result>("AllBooks");
        }
    }
}
